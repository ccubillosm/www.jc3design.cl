// Soluci√≥n definitiva para el carrusel - JC3Design
console.log("üé† Iniciando soluci√≥n del carrusel...");

// Funci√≥n para verificar si las dependencias est√°n listas
function checkDependencies() {
  if (typeof $ === 'undefined') {
    console.log("‚è≥ Esperando jQuery...");
    return false;
  }
  if (typeof $.fn.carousel === 'undefined') {
    console.log("‚è≥ Esperando Bootstrap...");
    return false;
  }
  return true;
}

// Funci√≥n para verificar que las im√°genes existan
function verifyImages() {
  const images = document.querySelectorAll('#heroCarousel img');
  console.log(`üì∏ Verificando ${images.length} im√°genes del carrusel:`);
  
  images.forEach((img, index) => {
    console.log(`üì∏ Imagen ${index + 1}: ${img.src}`);
    
    // Verificar que la imagen cargue
    img.onload = function() {
      console.log(`‚úÖ Imagen ${index + 1} cargada correctamente`);
    };
    
    img.onerror = function() {
      console.error(`‚ùå Error cargando imagen ${index + 1}: ${img.src}`);
    };
  });
}

// Funci√≥n principal para inicializar el carrusel
function initCarousel() {
  if (!checkDependencies()) {
    return false;
  }

  const $carousel = $('#heroCarousel');
  if ($carousel.length === 0) {
    console.error("‚ùå Carrusel no encontrado");
    return false;
  }

  try {
    // Destruir cualquier instancia previa
    $carousel.carousel('dispose');
    
    // Inicializar carrusel con configuraci√≥n optimizada
    $carousel.carousel({
      interval: 5000,
      wrap: true,
      keyboard: true,
      pause: 'hover'
    });
    
    console.log("‚úÖ Carrusel inicializado correctamente");
    
    // Verificar y restaurar im√°genes si es necesario
    verifyImages();
    forceReloadCarouselImages();
    
    // Forzar el primer ciclo despu√©s de un momento
    setTimeout(() => {
      $carousel.carousel('cycle');
      console.log("üîÑ Carrusel activado");
    }, 1000);
    
    return true;
  } catch (error) {
    console.error("‚ùå Error inicializando carrusel:", error);
    return false;
  }
}

// Funci√≥n para forzar recarga de im√°genes si es necesario
function forceReloadCarouselImages() {
  const carouselImages = document.querySelectorAll('#heroCarousel img');
  console.log("üîÑ Forzando recarga de im√°genes del carrusel...");
  
  carouselImages.forEach((img, index) => {
    let originalSrc = img.src;
    
    // Si la imagen tiene un placeholder SVG, restaurar la URL original
    if (originalSrc.includes('data:image/svg+xml')) {
      const dataSrc = img.getAttribute('data-src');
      if (dataSrc) {
        originalSrc = dataSrc;
        console.log(`üì∏ Restaurando imagen ${index + 1} desde data-src:`, originalSrc);
      } else {
        // URLs esperadas del carrusel
        const expectedSrcs = [
          'images/carr_1.jpg',
          'images/carr_2.jpg', 
          'images/carr_3.jpg'
        ];
        if (expectedSrcs[index]) {
          originalSrc = expectedSrcs[index];
          console.log(`üì∏ Restaurando imagen ${index + 1} con URL esperada:`, originalSrc);
        }
      }
    }
    
    // Marcar como cargada para evitar lazy loading
    img.classList.add('loaded');
    img.classList.remove('lazy-image');
    
    // Forzar recarga
    img.src = '';
    setTimeout(() => {
      img.src = originalSrc;
      console.log(`üîÑ Recargando imagen ${index + 1}:`, originalSrc);
    }, 100 * index);
  });
}

// Ejecutar cuando el DOM est√© listo
$(document).ready(function() {
  console.log("üìÑ DOM listo - Iniciando carrusel...");
  
  // Intentar inicializar inmediatamente
  if (!initCarousel()) {
    // Si falla, intentar varias veces con intervalos
    let attempts = 0;
    const maxAttempts = 10;
    
    const interval = setInterval(function() {
      attempts++;
      console.log(`‚è≥ Intento ${attempts}/${maxAttempts} de inicializar carrusel...`);
      
      if (initCarousel() || attempts >= maxAttempts) {
        clearInterval(interval);
        if (attempts >= maxAttempts) {
          console.error("‚ùå No se pudo inicializar el carrusel despu√©s de varios intentos");
          console.log("üîÑ Intentando recarga de im√°genes como √∫ltimo recurso...");
          forceReloadCarouselImages();
        }
      }
    }, 500);
  }
});

// Funci√≥n adicional para debugging completo
function debugCarousel() {
  console.log("üîç === DIAGN√ìSTICO COMPLETO DEL CARRUSEL ===");
  
  const carousel = document.getElementById('heroCarousel');
  console.log("üé† Carrusel encontrado:", carousel !== null);
  
  if (carousel) {
    const images = carousel.querySelectorAll('img');
    console.log(`üì∏ Total de im√°genes: ${images.length}`);
    
    images.forEach((img, index) => {
      console.log(`üì∏ Imagen ${index + 1}:`);
      console.log(`   - SRC: ${img.src}`);
      console.log(`   - Data-SRC: ${img.getAttribute('data-src') || 'No tiene'}`);
      console.log(`   - Clases: ${img.className}`);
      console.log(`   - Loaded: ${img.complete && img.naturalWidth > 0}`);
      console.log(`   - Es placeholder: ${img.src.includes('data:image/svg+xml')}`);
    });
    
    // Verificar Bootstrap
    console.log("üÖ±Ô∏è Bootstrap disponible:", typeof $.fn.carousel !== 'undefined');
    
    // Estado del carrusel
    const $carousel = $('#heroCarousel');
    console.log("üé† Carrusel jQuery encontrado:", $carousel.length > 0);
  }
  
  console.log("üîç === FIN DEL DIAGN√ìSTICO ===");
}

// Hacer funciones disponibles globalmente para debugging
window.initCarousel = initCarousel;
window.forceReloadCarouselImages = forceReloadCarouselImages;
window.verifyImages = verifyImages;
window.debugCarousel = debugCarousel;

// Debugging: mostrar estado cuando se carga la p√°gina
console.log("üé† Script del carrusel cargado - Funciones disponibles:");
console.log("- initCarousel() - Reinicializar carrusel");
console.log("- forceReloadCarouselImages() - Recargar im√°genes");
console.log("- verifyImages() - Verificar im√°genes");
console.log("- debugCarousel() - Diagn√≥stico completo");
